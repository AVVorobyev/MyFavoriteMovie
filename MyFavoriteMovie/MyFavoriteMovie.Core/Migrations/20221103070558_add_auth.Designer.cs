// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFavoriteMovie.Core.Contexts;

#nullable disable

namespace MyFavoriteMovie.Core.Migrations
{
    [DbContext(typeof(MSSQLDbContext))]
    [Migration("20221103070558_add_auth")]
    partial class add_auth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ActorActorAward", b =>
                {
                    b.Property<int>("ActorHolderId")
                        .HasColumnType("int");

                    b.Property<int>("AwardsId")
                        .HasColumnType("int");

                    b.HasKey("ActorHolderId", "AwardsId");

                    b.HasIndex("AwardsId");

                    b.ToTable("ActorHolderAwards", (string)null);
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("ActorsInMovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "ActorsInMovieId");

                    b.HasIndex("ActorsInMovieId");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("ActorMovie1", b =>
                {
                    b.Property<int>("DirectedById")
                        .HasColumnType("int");

                    b.Property<int>("DirectorsInMovieId")
                        .HasColumnType("int");

                    b.HasKey("DirectedById", "DirectorsInMovieId");

                    b.HasIndex("DirectorsInMovieId");

                    b.ToTable("MovieDirectedBy", (string)null);
                });

            modelBuilder.Entity("ActorUser", b =>
                {
                    b.Property<int>("FavoriteActorsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersFavoriteId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteActorsId", "UsersFavoriteId");

                    b.HasIndex("UsersFavoriteId");

                    b.ToTable("UserFavoriteActor", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("MovieMovieAward", b =>
                {
                    b.Property<int>("AwardsId")
                        .HasColumnType("int");

                    b.Property<int>("MovieHolderId")
                        .HasColumnType("int");

                    b.HasKey("AwardsId", "MovieHolderId");

                    b.HasIndex("MovieHolderId");

                    b.ToTable("MovieHolderAwards", (string)null);
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.Property<int>("FavoriteMoviesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersFavoriteId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteMoviesId", "UsersFavoriteId");

                    b.HasIndex("UsersFavoriteId");

                    b.ToTable("UserFavoriteMovie", (string)null);
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.ActorAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwardType")
                        .HasColumnType("int");

                    b.Property<string>("NominationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ActorAwards");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.ActorImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorImage");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RealeseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.MovieAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwardType")
                        .HasColumnType("int");

                    b.Property<string>("NominationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MovieAwards");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.MovieImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieImage");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.MovieRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<byte>("Rate")
                        .HasMaxLength(10)
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieRates");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ActorActorAward", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.ActorAward", null)
                        .WithMany()
                        .HasForeignKey("AwardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("ActorsInMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorMovie1", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("DirectedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("DirectorsInMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorUser", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("FavoriteActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieMovieAward", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.MovieAward", null)
                        .WithMany()
                        .HasForeignKey("AwardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoriteMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.ActorImage", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Actor", "Actor")
                        .WithMany("Images")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Episode", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.MovieImage", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.MovieRate", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.User", "User")
                        .WithMany("MovieRates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", "Movie")
                        .WithMany("MovieRates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Review", b =>
                {
                    b.HasOne("MyFavoriteMovie.Core.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMovie.Core.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Actor", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.Movie", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Images");

                    b.Navigation("MovieRates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MyFavoriteMovie.Core.Models.User", b =>
                {
                    b.Navigation("MovieRates");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
